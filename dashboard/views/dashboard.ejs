<%- include('partials/header', { title: 'Dashboard' }) %>

<div class="container-fluid">
  <div class="row mb-4">
    <div class="col-md-6">
      <h1 class="h3 mb-0">Dashboard</h1>
      <p class="text-muted">Bot Overview and Statistics</p>
    </div>
    <div class="col-md-6 text-md-end">
      <div class="btn-group">
        <a href="/dashboard" class="btn btn-primary">
          <i class="bi bi-arrow-clockwise me-1"></i> Refresh Stats
        </a>
      </div>
    </div>
  </div>
  
  <!-- Bot Status Section -->
  <div class="row mb-4">
    <div class="col-xl-3 col-md-6 mb-4">
      <div class="card stats-card h-100">
        <div class="card-body">
          <i class="bi bi-robot"></i>
          <div class="count">
            <span class="<%= botStatus === 'Online' ? 'text-success' : 'text-danger' %>">
              <%= botStatus %>
            </span>
          </div>
          <div class="label">Bot Status</div>
        </div>
      </div>
    </div>
    
    <div class="col-xl-3 col-md-6 mb-4">
      <div class="card stats-card h-100">
        <div class="card-body">
          <i class="bi bi-speedometer"></i>
          <div class="count"><%= botPing %> ms</div>
          <div class="label">API Ping</div>
        </div>
      </div>
    </div>
    
    <div class="col-xl-3 col-md-6 mb-4">
      <div class="card stats-card h-100">
        <div class="card-body">
          <i class="bi bi-server"></i>
          <div class="count"><%=  botUsername ? '1' : '0' %></div>
          <div class="label">Servers</div>
        </div>
      </div>
    </div>
    
    <div class="col-xl-3 col-md-6 mb-4">
      <div class="card stats-card h-100">
        <div class="card-body">
          <i class="bi bi-people"></i>
          <div class="count">N/A</div>
          <div class="label">Users</div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Account Stock Section -->
  <div class="row mb-4">
    <div class="col-lg-6 mb-4">
      <div class="card h-100">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5 class="mb-0">Account Stock Overview</h5>
          <a href="/stock" class="btn btn-sm btn-primary">Manage Stock</a>
        </div>
        <div class="card-body">
          <canvas id="stockChart" height="250"></canvas>
          <div class="mt-3 text-center">
            <div class="h4"><%= totalAccounts %></div>
            <div class="text-muted">Total accounts in stock</div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="col-lg-6 mb-4">
      <div class="card h-100">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5 class="mb-0">Bot Usage</h5>
          <div>
            <select class="form-select form-select-sm" id="timeRangeSelect">
              <option value="day">Last 24 hours</option>
              <option value="week" selected>Last 7 days</option>
              <option value="month">Last 30 days</option>
            </select>
          </div>
        </div>
        <div class="card-body">
          <canvas id="usageChart" height="250"></canvas>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Recent Activity Section -->
  <div class="row">
    <div class="col-md-6 mb-4">
      <div class="card h-100">
        <div class="card-header">
          <h5 class="mb-0">Recent Commands</h5>
        </div>
        <div class="card-body p-0">
          <div class="table-responsive">
            <table class="table mb-0">
              <thead>
                <tr>
                  <th>Command</th>
                  <th>User</th>
                  <th>Server</th>
                  <th>Time</th>
                </tr>
              </thead>
              <tbody>
                <!-- Sample Data, will be replaced with actual data -->
                <tr>
                  <td><code>.gen netflix</code></td>
                  <td>User#1234</td>
                  <td>My Server</td>
                  <td>10 min ago</td>
                </tr>
                <tr>
                  <td><code>.help</code></td>
                  <td>Someone#5678</td>
                  <td>Discord Server</td>
                  <td>15 min ago</td>
                </tr>
                <tr>
                  <td><code>.stock</code></td>
                  <td>Admin#9012</td>
                  <td>Admin Server</td>
                  <td>30 min ago</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
    
    <div class="col-md-6 mb-4">
      <div class="card h-100">
        <div class="card-header">
          <h5 class="mb-0">Top Commands</h5>
        </div>
        <div class="card-body">
          <canvas id="commandsChart" height="250"></canvas>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Stock Chart
    const stockCtx = document.getElementById('stockChart').getContext('2d');
    const stockChart = new Chart(stockCtx, {
      type: 'pie',
      data: {
        labels: ['Basic', 'Premium', 'Extreme', 'Free'],
        datasets: [{
          data: [<%= totalAccounts || 0 %>, 0, 0, 0], // Using actual total accounts
          backgroundColor: [
            '#5865F2',
            '#57F287',
            '#FEE75C',
            '#EB459E'
          ],
          borderColor: 'rgba(0, 0, 0, 0.1)',
          borderWidth: 1
        }]
      },
      options: {
        plugins: {
          legend: {
            position: 'bottom',
            labels: {
              color: '#FFFFFF',
              padding: 15
            }
          }
        }
      }
    });
    
    // Usage Chart
    const usageCtx = document.getElementById('usageChart').getContext('2d');
    const usageChart = new Chart(usageCtx, {
      type: 'line',
      data: {
        labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
        datasets: [{
          label: 'Commands Used',
          data: [65, 59, 80, 81, 56, 55, 70], // Sample data
          fill: true,
          backgroundColor: 'rgba(88, 101, 242, 0.2)',
          borderColor: '#5865F2',
          tension: 0.4
        }]
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
            grid: {
              color: 'rgba(255, 255, 255, 0.1)'
            },
            ticks: {
              color: '#FFFFFF'
            }
          },
          x: {
            grid: {
              color: 'rgba(255, 255, 255, 0.1)'
            },
            ticks: {
              color: '#FFFFFF'
            }
          }
        },
        plugins: {
          legend: {
            labels: {
              color: '#FFFFFF'
            }
          }
        }
      }
    });
    
    // Top Commands Chart
    const commandsCtx = document.getElementById('commandsChart').getContext('2d');
    const commandsChart = new Chart(commandsCtx, {
      type: 'bar',
      data: {
        labels: ['.gen', '.help', '.stock', '.bgen', '.check'],
        datasets: [{
          label: 'Usage Count',
          data: [120, 90, 70, 60, 50], // Sample data
          backgroundColor: [
            '#5865F2',
            '#57F287',
            '#FEE75C',
            '#EB459E',
            '#ED4245'
          ]
        }]
      },
      options: {
        indexAxis: 'y',
        scales: {
          x: {
            beginAtZero: true,
            grid: {
              color: 'rgba(255, 255, 255, 0.1)'
            },
            ticks: {
              color: '#FFFFFF'
            }
          },
          y: {
            grid: {
              display: false
            },
            ticks: {
              color: '#FFFFFF'
            }
          }
        },
        plugins: {
          legend: {
            display: false
          }
        }
      }
    });
    
    // Handle time range change
    document.getElementById('timeRangeSelect').addEventListener('change', function() {
      // This would typically make an API call to get new data
      // For now, just update with random data
      const newData = Array.from({length: 7}, () => Math.floor(Math.random() * 100));
      usageChart.data.datasets[0].data = newData;
      usageChart.update();
    });
  });
</script>

<%- include('partials/footer') %>